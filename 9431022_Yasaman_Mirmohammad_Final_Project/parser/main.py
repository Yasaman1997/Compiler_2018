# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'HARF SHENASE ADADSABET REALCONST BOOLSABET WHITE_SPACE OPENING_BRACKET CLOSING_BRACKET OPENING_PARENTHESES COSING_PARENTHESES OPENING_BRACE CLOSING_BRACE COLON SEMICOLON COMMA PROGRAM_KW BOOLEAN_KW FLOAT_KW INTEGER_KW CHAR_KW IF_KW THEN_KW ELSE_KW SWITCH_KW END_KW CASE_KW DEFAULT_KW FOR_KW DO_KW WHILE_KW RETURN_KW EXIT_WHEN_1ST_KW EXIT_WHEN_2ND_KW EXP PLUS_EXP MINUS_EXP MUL_EXP DIV_EXP PLUSPLUS MINUSMINUS DOWNTO_KW UPTO_KW OR_KW AND_KW AND_THEN_KW OR_NOT_KW NOT_KW LT LE EQ NEQ GE G PLUS MINUS MUL DIV MOD DOT METHOD_KW MAIN COMMENTprogram : PROGRAM_KW SHENASE declarations_list list_ravie MAIN block\n                   | PROGRAM_KW SHENASE list_ravie MAIN block\n                   | PROGRAM_KW SHENASE declarations_list MAIN block\n                   | PROGRAM_KW SHENASE MAIN blockdeclarations_list : declarations\n                             | declarations_list declarationsdeclarations : taeen_type declarator_list SEMICOLONtaeen_type : INTEGER_KW\n                      | FLOAT_KW\n                      | CHAR_KW\n                      | BOOLEAN_KWdeclarator_list : declarator\n                           | declarator_list COMMA declaratordeclarator :\tdec\n                      |\tdec\tEXP\tmeghdar_avaliedec : SHENASE\n               | SHENASE OPENING_BRACKET range CLOSING_BRACKET\n               | SHENASE OPENING_BRACKET ADADSABET CLOSING_BRACKETrange : SHENASE DOT DOT SHENASE\n                 | ADADSABET DOT DOT ADADSABET\n                 | ebarat_riazi DOT DOT ebarat_riazimeghdar_avalie : ebarat_sabet\n                          | OPENING_BRACE list_meghdar_avalie CLOSING_BRACElist_meghdar_avalie : ebarat_sabet COMMA\tlist_meghdar_avalie\n                               | ebarat_sabetlist_ravie : list_ravie ravie\n                      | ravieravie : METHOD_KW SHENASE parameters\tOPENING_BRACE declarations_list\tblock CLOSING_BRACE SEMICOLON\n                 | METHOD_KW SHENASE parameters\tOPENING_BRACE block CLOSING_BRACE SEMICOLONparameters : OPENING_PARENTHESES declarations_list COSING_PARENTHESES\n                      | OPENING_PARENTHESES COSING_PARENTHESESblock : OPENING_BRACE statement_list\tCLOSING_BRACEstatement_list : statement SEMICOLON\n                          | SEMICOLON\n                          | statement_list statement SEMICOLON\n                          | statement_list SEMICOLONstatement : SHENASE EXP ebarat\n                     | IF_KW ebarat_bool THEN_KW statement ELSE_KW statement\n                     | IF_KW ebarat_bool THEN_KW statement ELSE_KW\n                     | IF_KW ebarat_bool THEN_KW ELSE_KW statement\n                     | IF_KW ebarat_bool THEN_KW ELSE_KW\n                     | DO_KW statement WHILE_KW ebarat_bool\n                     | DO_KW WHILE_KW ebarat_bool\n                     | FOR_KW SHENASE EXP counter DO_KW statement\n                     | FOR_KW SHENASE EXP counter DO_KW\n                     | SWITCH_KW ebarat onsor_mored default END_KW\n                     | SWITCH_KW ebarat onsor_mored END_KW\n                     | SHENASE OPENING_PARENTHESES arguments_list COSING_PARENTHESES\n                     | SHENASE OPENING_PARENTHESES COSING_PARENTHESES\n                     | SHENASE OPENING_BRACKET ebarat CLOSING_BRACKET EXP ebarat\n                     | RETURN_KW ebarat\n                     | EXIT_WHEN_1ST_KW EXIT_WHEN_2ND_KW ebarat_bool\n                     | blockarguments_list : multi_argumentsmulti_arguments : multi_arguments COMMA ebarat\n                           | ebaratcounter : ADADSABET UPTO_KW ADADSABET\n                   | ADADSABET DOWNTO_KW ADADSABETonsor_mored : CASE_KW ADADSABET COLON block\n                       | onsor_mored CASE_KW ADADSABET COLON blockdefault : DEFAULT_KW COLON blockebarat : ebarat_sabet\n                   | ebarat_bool\n                   | ebarat_riazi\n                   | SHENASE\n                   | SHENASE OPENING_BRACKET ebarat CLOSING_BRACKET\n                   | SHENASE OPENING_PARENTHESES arguments_list COSING_PARENTHESES\n                   | SHENASE OPENING_PARENTHESES COSING_PARENTHESES\n                   | OPENING_PARENTHESES ebarat COSING_PARENTHESESebarat_sabet : ADADSABET\n                        | REALCONST\n                        | HARF\n                        | BOOLSABETebarat_bool : zojmoratab AND_KW \n                       | zojmoratab OR_KW \n                       | zojmoratab AND_THEN_KW\n                       | zojmoratab OR_NOT_KW\n                       | zojmoratab LT \n                       | zojmoratab LE\n                       | zojmoratab G \n                       | zojmoratab GE \n                       | zojmoratab EQ\n                       | zojmoratab NEQ\n                       | ebarat NOT_KWebarat_riazi : zojmoratab PLUS\n                        | zojmoratab MINUS\n                        | zojmoratab MUL\n                        | zojmoratab DIV\n                        | zojmoratab MOD\n                        | MINUS ebaratzojmoratab : OPENING_PARENTHESES ebarat COMMA ebarat COSING_PARENTHESES'

_lr_action_items = {'REALCONST': (
[31, 36, 40, 41, 52, 59, 64, 69, 74, 77, 80, 85, 86, 87, 117, 118, 120, 136, 138, 156, 178, ],
[53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, ]), 'COSING_PARENTHESES': (
[13, 18, 27, 33, 47, 53, 54, 55, 57, 66, 67, 68, 72, 85, 95, 96, 97, 98, 99, 102, 105, 106, 107, 108, 109, 110, 111,
 112, 113, 114, 115, 116, 117, 122, 128, 129, 131, 142, 143, 144, 162, 166, 167, 177, ],
[-5, -6, 48, -7, 88, -71, -73, -70, -72, -62, -63, -64, -65, 130, -85, -89, -86, -88, -87, -90, 142, -78, -79, -81, -77,
 -74, -76, -83, -75, -82, -80, -84, 144, 142, -54, 157, -56, -69, 166, -68, 180, -67, -66, -55, ]), 'SEMICOLON': (
[19, 20, 21, 22, 25, 37, 38, 42, 45, 51, 53, 54, 55, 56, 57, 58, 66, 67, 68, 71, 72, 73, 82, 83, 84, 95, 96, 97, 98, 99,
 101, 102, 103, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 125, 127, 130, 132, 135, 137, 142, 144, 146,
 148, 153, 157, 159, 166, 167, 168, 169, 171, 174, 181, 185, 188, ],
[-14, 33, -12, -16, 37, -34, 73, -53, 82, -22, -71, -73, -70, -15, -72, -13, -62, -63, -64, -51, -65, -33, -36, 127,
 -32, -85, -89, -86, -88, -87, -17, -90, -18, -78, -79, -81, -77, -74, -76, -83, -75, -82, -80, -84, -43, -52, -35, -49,
 -37, 160, -23, -69, -68, -42, -41, -47, -48, 179, -67, -66, -39, -40, -46, -45, -38, -44, -50, ]), 'COMMA': (
[19, 20, 21, 22, 51, 53, 54, 55, 56, 57, 58, 66, 67, 68, 72, 91, 93, 95, 96, 97, 98, 99, 101, 102, 103, 105, 106, 107,
 108, 109, 110, 111, 112, 113, 114, 115, 116, 122, 128, 131, 137, 142, 144, 166, 167, 177, ],
[-14, 32, -12, -16, -22, -71, -73, -70, -15, -72, -13, -62, -63, -64, -65, 136, 138, -85, -89, -86, -88, -87, -17, -90,
 -18, 138, -78, -79, -81, -77, -74, -76, -83, -75, -82, -80, -84, 138, 156, -56, -23, -69, -68, -67, -66, -55, ]),
                    'HARF': (
                    [31, 36, 40, 41, 52, 59, 64, 69, 74, 77, 80, 85, 86, 87, 117, 118, 120, 136, 138, 156, 178, ],
                    [57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, ]), 'FOR_KW': (
    [25, 37, 39, 45, 73, 82, 121, 127, 148, 168, 174, ], [44, -34, 44, 44, -33, -36, 44, -35, 44, 44, 44, ]), 'DO_KW': (
    [25, 37, 39, 45, 73, 82, 121, 127, 148, 154, 168, 174, 186, 187, ],
    [39, -34, 39, 39, -33, -36, 39, -35, 39, 174, 39, 39, -57, -58, ]), 'SWITCH_KW': (
    [25, 37, 39, 45, 73, 82, 121, 127, 148, 168, 174, ], [41, -34, 41, 41, -33, -36, 41, -35, 41, 41, 41, ]),
                    'AND_THEN_KW': ([70, 180, ], [111, -91, ]), 'ADADSABET': (
    [31, 34, 36, 40, 41, 52, 59, 64, 69, 74, 77, 80, 85, 86, 87, 117, 118, 120, 123, 126, 136, 138, 141, 152, 156, 175,
     176, 178, ],
    [55, 65, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 149, 155, 55, 55, 165, 173, 55, 186, 187,
     55, ]), 'NOT_KW': (
    [53, 54, 55, 57, 66, 67, 68, 71, 72, 76, 78, 79, 93, 95, 96, 97, 98, 99, 102, 105, 106, 107, 108, 109, 110, 111,
     112, 113, 114, 115, 116, 119, 122, 125, 131, 132, 133, 142, 144, 145, 146, 162, 166, 167, 177, 188, ],
    [-71, -73, -70, -72, -62, -63, -64, 116, -65, -63, 116, 116, 116, -85, -89, -86, -88, -87, 116, 116, -78, -79, -81,
     -77, -74, -76, -83, -75, -82, -80, -84, -63, 116, -63, 116, 116, 116, -69, -68, 116, -63, 116, -67, -66, 116,
     116, ]), 'EXIT_WHEN_2ND_KW': ([43, ], [80, ]), 'OR_KW': ([70, 180, ], [113, -91, ]),
                    'GE': ([70, 180, ], [108, -91, ]), 'LE': ([70, 180, ], [107, -91, ]),
                    'MOD': ([61, 70, 180, ], [96, 96, -91, ]), 'EXIT_WHEN_1ST_KW': (
    [25, 37, 39, 45, 73, 82, 121, 127, 148, 168, 174, ], [43, -34, 43, 43, -33, -36, 43, -35, 43, 43, 43, ]),
                    'CASE_KW': (
                    [53, 54, 55, 57, 66, 67, 68, 72, 79, 84, 95, 96, 97, 98, 99, 102, 106, 107, 108, 109, 110, 111, 112,
                     113, 114, 115, 116, 124, 142, 144, 166, 167, 182, 189, ],
                    [-71, -73, -70, -72, -62, -63, -64, -65, 123, -32, -85, -89, -86, -88, -87, -90, -78, -79, -81, -77,
                     -74, -76, -83, -75, -82, -80, -84, 152, -69, -68, -67, -66, -59, -60, ]),
                    'PLUS': ([61, 70, 180, ], [95, 95, -91, ]),
                    'INTEGER_KW': ([3, 6, 13, 18, 27, 33, 47, 49, 89, ], [4, 4, -5, -6, 4, -7, 4, 4, 4, ]),
                    'PROGRAM_KW': ([0, ], [1, ]), 'METHOD_KW': (
    [3, 6, 9, 11, 13, 16, 18, 24, 33, 160, 179, ], [5, 5, -27, 5, -5, 5, -6, -26, -7, -29, -28, ]),
                    'END_KW': ([84, 124, 150, 182, 183, 189, ], [-32, 153, 171, -59, -61, -60, ]), 'THEN_KW': (
    [76, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, ],
    [121, -78, -79, -81, -77, -74, -76, -83, -75, -82, -80, -84, ]), 'SHENASE': (
    [1, 4, 5, 7, 8, 10, 14, 25, 32, 34, 36, 37, 39, 40, 41, 44, 45, 59, 64, 69, 73, 74, 77, 80, 82, 85, 86, 87, 117,
     118, 120, 121, 127, 138, 139, 148, 156, 168, 174, 178, ],
    [3, -8, 15, -11, -9, 22, -10, 46, 22, 60, 72, -34, 46, 72, 72, 81, 46, 72, 72, 72, -33, 72, 72, 72, -36, 72, 72, 72,
     72, 72, 72, 46, -35, 72, 163, 46, 72, 46, 46, 72, ]), 'CLOSING_BRACKET': (
    [53, 54, 55, 57, 63, 65, 66, 67, 68, 72, 95, 96, 97, 98, 99, 102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
     116, 133, 142, 144, 145, 163, 164, 165, 166, 167, ],
    [-71, -73, -70, -72, 101, 103, -62, -63, -64, -65, -85, -89, -86, -88, -87, -90, -78, -79, -81, -77, -74, -76, -83,
     -75, -82, -80, -84, 158, -69, -68, 167, -19, -21, -20, -67, -66, ]), 'G': ([70, 180, ], [115, -91, ]),
                    'AND_KW': ([70, 180, ], [110, -91, ]), 'MINUS': (
    [34, 36, 40, 41, 59, 61, 64, 69, 70, 74, 77, 80, 85, 86, 87, 117, 118, 120, 138, 140, 156, 178, 180, ],
    [64, 64, 64, 64, 64, 97, 64, 64, 97, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, -91, ]), 'BOOLSABET': (
    [31, 36, 40, 41, 52, 59, 64, 69, 74, 77, 80, 85, 86, 87, 117, 118, 120, 136, 138, 156, 178, ],
    [54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, ]),
                    'OPENING_BRACKET': ([22, 46, 72, ], [34, 87, 118, ]), 'WHILE_KW': (
    [39, 42, 53, 54, 55, 57, 66, 67, 68, 71, 72, 75, 84, 95, 96, 97, 98, 99, 102, 106, 107, 108, 109, 110, 111, 112,
     113, 114, 115, 116, 119, 125, 130, 132, 142, 144, 146, 148, 153, 157, 166, 167, 168, 169, 171, 174, 181, 185,
     188, ],
    [74, -53, -71, -73, -70, -72, -62, -63, -64, -51, -65, 120, -32, -85, -89, -86, -88, -87, -90, -78, -79, -81, -77,
     -74, -76, -83, -75, -82, -80, -84, -43, -52, -49, -37, -69, -68, -42, -41, -47, -48, -67, -66, -39, -40, -46, -45,
     -38, -44, -50, ]), 'CHAR_KW': ([3, 6, 13, 18, 27, 33, 47, 49, 89, ], [14, 14, -5, -6, 14, -7, 14, 14, 14, ]),
                    'BOOLEAN_KW': ([3, 6, 13, 18, 27, 33, 47, 49, 89, ], [7, 7, -5, -6, 7, -7, 7, 7, 7, ]),
                    'COLON': ([149, 151, 173, ], [170, 172, 184, ]), 'IF_KW': (
    [25, 37, 39, 45, 73, 82, 121, 127, 148, 168, 174, ], [40, -34, 40, 40, -33, -36, 40, -35, 40, 40, 40, ]),
                    'DIV': ([61, 70, 180, ], [98, 98, -91, ]), 'MAIN': (
    [3, 6, 9, 11, 13, 16, 18, 24, 33, 160, 179, ], [12, 17, -27, 23, -5, 29, -6, -26, -7, -29, -28, ]), 'DOT': (
    [53, 54, 55, 57, 60, 62, 65, 66, 67, 68, 72, 94, 95, 96, 97, 98, 99, 100, 102, 104, 106, 107, 108, 109, 110, 111,
     112, 113, 114, 115, 116, 142, 144, 166, 167, ],
    [-71, -73, -70, -72, 94, 100, 104, -62, -63, -64, -65, 139, -85, -89, -86, -88, -87, 140, -90, 141, -78, -79, -81,
     -77, -74, -76, -83, -75, -82, -80, -84, -69, -68, -67, -66, ]),
                    'DEFAULT_KW': ([84, 124, 182, 189, ], [-32, 151, -59, -60, ]),
                    'MUL': ([61, 70, 180, ], [99, 99, -91, ]), 'OPENING_PARENTHESES': (
    [15, 34, 36, 40, 41, 46, 59, 64, 69, 72, 74, 77, 80, 85, 86, 87, 117, 118, 120, 138, 140, 156, 178, ],
    [27, 59, 69, 77, 69, 85, 69, 69, 69, 117, 77, 69, 77, 69, 69, 69, 69, 69, 77, 69, 59, 69, 69, ]),
                    '$end': ([2, 26, 30, 35, 50, 84, ], [0, -4, -3, -2, -1, -32, ]), 'CLOSING_BRACE': (
    [37, 45, 53, 54, 55, 57, 73, 82, 84, 90, 91, 92, 127, 134, 161, ],
    [-34, 84, -71, -73, -70, -72, -33, -36, -32, 135, -25, 137, -35, 159, -24, ]), 'LT': ([70, 180, ], [106, -91, ]),
                    'EXP': ([19, 22, 46, 81, 101, 103, 158, ], [31, -16, 86, 126, -17, -18, 178, ]),
                    'DOWNTO_KW': ([155, ], [176, ]), 'RETURN_KW': (
    [25, 37, 39, 45, 73, 82, 121, 127, 148, 168, 174, ], [36, -34, 36, 36, -33, -36, 36, -35, 36, 36, 36, ]),
                    'ELSE_KW': (
                    [42, 53, 54, 55, 57, 66, 67, 68, 71, 72, 84, 95, 96, 97, 98, 99, 102, 106, 107, 108, 109, 110, 111,
                     112, 113, 114, 115, 116, 119, 121, 125, 130, 132, 142, 144, 146, 147, 148, 153, 157, 166, 167, 168,
                     169, 171, 174, 181, 185, 188, ],
                    [-53, -71, -73, -70, -72, -62, -63, -64, -51, -65, -32, -85, -89, -86, -88, -87, -90, -78, -79, -81,
                     -77, -74, -76, -83, -75, -82, -80, -84, -43, 148, -52, -49, -37, -69, -68, -42, 168, -41, -47, -48,
                     -67, -66, -39, -40, -46, -45, -38, -44, -50, ]), 'UPTO_KW': ([155, ], [175, ]),
                    'OR_NOT_KW': ([70, 180, ], [109, -91, ]), 'OPENING_BRACE': (
    [12, 13, 17, 18, 23, 25, 28, 29, 31, 33, 37, 39, 45, 48, 49, 73, 82, 88, 89, 121, 127, 148, 168, 170, 172, 174,
     184, ],
    [25, -5, 25, -6, 25, 25, 49, 25, 52, -7, -34, 25, 25, -31, 25, -33, -36, -30, 25, 25, -35, 25, 25, 25, 25, 25,
     25, ]), 'NEQ': ([70, 180, ], [112, -91, ]),
                    'FLOAT_KW': ([3, 6, 13, 18, 27, 33, 47, 49, 89, ], [8, 8, -5, -6, 8, -7, 8, 8, 8, ]),
                    'EQ': ([70, 180, ], [114, -91, ]), }

_lr_action = {}
for _k, _v in _lr_action_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_action:  _lr_action[_x] = {}
        _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'ebarat_sabet': (
[31, 36, 40, 41, 52, 59, 64, 69, 74, 77, 80, 85, 86, 87, 117, 118, 120, 136, 138, 156, 178, ],
[51, 66, 66, 66, 91, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 91, 66, 66, 66, ]),
                  'dec': ([10, 32, ], [19, 19, ]), 'multi_arguments': ([85, 117, ], [128, 128, ]),
                  'declarations_list': ([3, 27, 49, ], [6, 47, 89, ]), 'default': ([124, ], [150, ]),
                  'declarator_list': ([10, ], [20, ]), 'ebarat_riazi': (
    [34, 36, 40, 41, 59, 64, 69, 74, 77, 80, 85, 86, 87, 117, 118, 120, 138, 140, 156, 178, ],
    [62, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 164, 68, 68, ]), 'counter': ([126, ], [154, ]),
                  'list_ravie': ([3, 6, ], [11, 16, ]), 'range': ([34, ], [63, ]),
                  'arguments_list': ([85, 117, ], [129, 143, ]), 'meghdar_avalie': ([31, ], [56, ]),
                  'ravie': ([3, 6, 11, 16, ], [9, 9, 24, 24, ]), 'program': ([0, ], [2, ]), 'block': (
    [12, 17, 23, 25, 29, 39, 45, 49, 89, 121, 148, 168, 170, 172, 174, 184, ],
    [26, 30, 35, 42, 50, 42, 42, 90, 134, 42, 42, 42, 182, 183, 42, 189, ]), 'zojmoratab': (
    [34, 36, 40, 41, 59, 64, 69, 74, 77, 80, 85, 86, 87, 117, 118, 120, 138, 140, 156, 178, ],
    [61, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 61, 70, 70, ]), 'parameters': ([15, ], [28, ]),
                  'declarator': ([10, 32, ], [21, 58, ]), 'ebarat': (
    [36, 40, 41, 59, 64, 69, 74, 77, 80, 85, 86, 87, 117, 118, 120, 138, 156, 178, ],
    [71, 78, 79, 93, 102, 105, 78, 122, 78, 131, 132, 133, 131, 145, 78, 162, 177, 188, ]),
                  'taeen_type': ([3, 6, 27, 47, 49, 89, ], [10, 10, 10, 10, 10, 10, ]),
                  'list_meghdar_avalie': ([52, 136, ], [92, 161, ]), 'ebarat_bool': (
    [36, 40, 41, 59, 64, 69, 74, 77, 80, 85, 86, 87, 117, 118, 120, 138, 156, 178, ],
    [67, 76, 67, 67, 67, 67, 119, 67, 125, 67, 67, 67, 67, 67, 146, 67, 67, 67, ]), 'statement_list': ([25, ], [45, ]),
                  'declarations': ([3, 6, 27, 47, 49, 89, ], [13, 18, 13, 18, 13, 18, ]),
                  'onsor_mored': ([79, ], [124, ]),
                  'statement': ([25, 39, 45, 121, 148, 168, 174, ], [38, 75, 83, 147, 169, 181, 185, ]), }

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_goto: _lr_goto[_x] = {}
        _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
    ("S' -> program", "S'", 1, None, None, None),
    (
    'program -> PROGRAM_KW SHENASE declarations_list list_ravie MAIN block', 'program', 6, 'p_program', 'parser.py', 9),
    ('program -> PROGRAM_KW SHENASE list_ravie MAIN block', 'program', 5, 'p_program', 'parser.py', 10),
    ('program -> PROGRAM_KW SHENASE declarations_list MAIN block', 'program', 5, 'p_program', 'parser.py', 11),
    ('program -> PROGRAM_KW SHENASE MAIN block', 'program', 4, 'p_program', 'parser.py', 12),
    ('declarations_list -> declarations', 'declarations_list', 1, 'p_declarations_list', 'parser.py', 15),
    ('declarations_list -> declarations_list declarations', 'declarations_list', 2, 'p_declarations_list', 'parser.py',
     16),
    ('declarations -> taeen_type declarator_list SEMICOLON', 'declarations', 3, 'p_declarations', 'parser.py', 19),
    ('taeen_type -> INTEGER_KW', 'taeen_type', 1, 'p_taeen_type', 'parser.py', 22),
    ('taeen_type -> FLOAT_KW', 'taeen_type', 1, 'p_taeen_type', 'parser.py', 23),
    ('taeen_type -> CHAR_KW', 'taeen_type', 1, 'p_taeen_type', 'parser.py', 24),
    ('taeen_type -> BOOLEAN_KW', 'taeen_type', 1, 'p_taeen_type', 'parser.py', 25),
    ('declarator_list -> declarator', 'declarator_list', 1, 'p_declarator_list', 'parser.py', 28),
    ('declarator_list -> declarator_list COMMA declarator', 'declarator_list', 3, 'p_declarator_list', 'parser.py', 29),
    ('declarator -> dec', 'declarator', 1, 'p_declarator', 'parser.py', 32),
    ('declarator -> dec EXP meghdar_avalie', 'declarator', 3, 'p_declarator', 'parser.py', 33),
    ('dec -> SHENASE', 'dec', 1, 'p_dec', 'parser.py', 36),
    ('dec -> SHENASE OPENING_BRACKET range CLOSING_BRACKET', 'dec', 4, 'p_dec', 'parser.py', 37),
    ('dec -> SHENASE OPENING_BRACKET ADADSABET CLOSING_BRACKET', 'dec', 4, 'p_dec', 'parser.py', 38),
    ('range -> SHENASE DOT DOT SHENASE', 'range', 4, 'p_range', 'parser.py', 41),
    ('range -> ADADSABET DOT DOT ADADSABET', 'range', 4, 'p_range', 'parser.py', 42),
    ('range -> ebarat_riazi DOT DOT ebarat_riazi', 'range', 4, 'p_range', 'parser.py', 43),
    ('meghdar_avalie -> ebarat_sabet', 'meghdar_avalie', 1, 'p_meghdar_avalie', 'parser.py', 46),
    ('meghdar_avalie -> OPENING_BRACE list_meghdar_avalie CLOSING_BRACE', 'meghdar_avalie', 3, 'p_meghdar_avalie',
     'parser.py', 47),
    ('list_meghdar_avalie -> ebarat_sabet COMMA list_meghdar_avalie', 'list_meghdar_avalie', 3, 'p_list_meghdar_avalie',
     'parser.py', 50),
    ('list_meghdar_avalie -> ebarat_sabet', 'list_meghdar_avalie', 1, 'p_list_meghdar_avalie', 'parser.py', 51),
    ('list_ravie -> list_ravie ravie', 'list_ravie', 2, 'p_list_ravie', 'parser.py', 54),
    ('list_ravie -> ravie', 'list_ravie', 1, 'p_list_ravie', 'parser.py', 55),
    ('ravie -> METHOD_KW SHENASE parameters OPENING_BRACE declarations_list block CLOSING_BRACE SEMICOLON', 'ravie', 8,
     'p_ravie', 'parser.py', 58),
    ('ravie -> METHOD_KW SHENASE parameters OPENING_BRACE block CLOSING_BRACE SEMICOLON', 'ravie', 7, 'p_ravie',
     'parser.py', 59),
    ('parameters -> OPENING_PARENTHESES declarations_list COSING_PARENTHESES', 'parameters', 3, 'p_parameters',
     'parser.py', 62),
    ('parameters -> OPENING_PARENTHESES COSING_PARENTHESES', 'parameters', 2, 'p_parameters', 'parser.py', 63),
    ('block -> OPENING_BRACE statement_list CLOSING_BRACE', 'block', 3, 'p_block', 'parser.py', 66),
    ('statement_list -> statement SEMICOLON', 'statement_list', 2, 'p_statement_list', 'parser.py', 69),
    ('statement_list -> SEMICOLON', 'statement_list', 1, 'p_statement_list', 'parser.py', 70),
    ('statement_list -> statement_list statement SEMICOLON', 'statement_list', 3, 'p_statement_list', 'parser.py', 71),
    ('statement_list -> statement_list SEMICOLON', 'statement_list', 2, 'p_statement_list', 'parser.py', 72),
    ('statement -> SHENASE EXP ebarat', 'statement', 3, 'p_statement', 'parser.py', 75),
    ('statement -> IF_KW ebarat_bool THEN_KW statement ELSE_KW statement', 'statement', 6, 'p_statement', 'parser.py',
     76),
    ('statement -> IF_KW ebarat_bool THEN_KW statement ELSE_KW', 'statement', 5, 'p_statement', 'parser.py', 77),
    ('statement -> IF_KW ebarat_bool THEN_KW ELSE_KW statement', 'statement', 5, 'p_statement', 'parser.py', 78),
    ('statement -> IF_KW ebarat_bool THEN_KW ELSE_KW', 'statement', 4, 'p_statement', 'parser.py', 79),
    ('statement -> DO_KW statement WHILE_KW ebarat_bool', 'statement', 4, 'p_statement', 'parser.py', 80),
    ('statement -> DO_KW WHILE_KW ebarat_bool', 'statement', 3, 'p_statement', 'parser.py', 81),
    ('statement -> FOR_KW SHENASE EXP counter DO_KW statement', 'statement', 6, 'p_statement', 'parser.py', 82),
    ('statement -> FOR_KW SHENASE EXP counter DO_KW', 'statement', 5, 'p_statement', 'parser.py', 83),
    ('statement -> SWITCH_KW ebarat onsor_mored default END_KW', 'statement', 5, 'p_statement', 'parser.py', 84),
    ('statement -> SWITCH_KW ebarat onsor_mored END_KW', 'statement', 4, 'p_statement', 'parser.py', 85),
    ('statement -> SHENASE OPENING_PARENTHESES arguments_list COSING_PARENTHESES', 'statement', 4, 'p_statement',
     'parser.py', 86),
    ('statement -> SHENASE OPENING_PARENTHESES COSING_PARENTHESES', 'statement', 3, 'p_statement', 'parser.py', 87),
    ('statement -> SHENASE OPENING_BRACKET ebarat CLOSING_BRACKET EXP ebarat', 'statement', 6, 'p_statement',
     'parser.py', 88),
    ('statement -> RETURN_KW ebarat', 'statement', 2, 'p_statement', 'parser.py', 89),
    ('statement -> EXIT_WHEN_1ST_KW EXIT_WHEN_2ND_KW ebarat_bool', 'statement', 3, 'p_statement', 'parser.py', 90),
    ('statement -> block', 'statement', 1, 'p_statement', 'parser.py', 91),
    ('arguments_list -> multi_arguments', 'arguments_list', 1, 'p_arguments_list', 'parser.py', 94),
    ('multi_arguments -> multi_arguments COMMA ebarat', 'multi_arguments', 3, 'p_multi_arguments', 'parser.py', 97),
    ('multi_arguments -> ebarat', 'multi_arguments', 1, 'p_multi_arguments', 'parser.py', 98),
    ('counter -> ADADSABET UPTO_KW ADADSABET', 'counter', 3, 'p_counter', 'parser.py', 101),
    ('counter -> ADADSABET DOWNTO_KW ADADSABET', 'counter', 3, 'p_counter', 'parser.py', 102),
    ('onsor_mored -> CASE_KW ADADSABET COLON block', 'onsor_mored', 4, 'p_onsor_mored', 'parser.py', 105),
    ('onsor_mored -> onsor_mored CASE_KW ADADSABET COLON block', 'onsor_mored', 5, 'p_onsor_mored', 'parser.py', 106),
    ('default -> DEFAULT_KW COLON block', 'default', 3, 'p_default', 'parser.py', 109),
    ('ebarat -> ebarat_sabet', 'ebarat', 1, 'p_ebarat', 'parser.py', 112),
    ('ebarat -> ebarat_bool', 'ebarat', 1, 'p_ebarat', 'parser.py', 113),
    ('ebarat -> ebarat_riazi', 'ebarat', 1, 'p_ebarat', 'parser.py', 114),
    ('ebarat -> SHENASE', 'ebarat', 1, 'p_ebarat', 'parser.py', 115),
    ('ebarat -> SHENASE OPENING_BRACKET ebarat CLOSING_BRACKET', 'ebarat', 4, 'p_ebarat', 'parser.py', 116),
    ('ebarat -> SHENASE OPENING_PARENTHESES arguments_list COSING_PARENTHESES', 'ebarat', 4, 'p_ebarat', 'parser.py',
     117),
    ('ebarat -> SHENASE OPENING_PARENTHESES COSING_PARENTHESES', 'ebarat', 3, 'p_ebarat', 'parser.py', 118),
    ('ebarat -> OPENING_PARENTHESES ebarat COSING_PARENTHESES', 'ebarat', 3, 'p_ebarat', 'parser.py', 119),
    ('ebarat_sabet -> ADADSABET', 'ebarat_sabet', 1, 'p_ebarat_sabet', 'parser.py', 122),
    ('ebarat_sabet -> REALCONST', 'ebarat_sabet', 1, 'p_ebarat_sabet', 'parser.py', 123),
    ('ebarat_sabet -> HARF', 'ebarat_sabet', 1, 'p_ebarat_sabet', 'parser.py', 124),
    ('ebarat_sabet -> BOOLSABET', 'ebarat_sabet', 1, 'p_ebarat_sabet', 'parser.py', 125),
    ('ebarat_bool -> zojmoratab AND_KW', 'ebarat_bool', 2, 'p_ebarart_bool', 'parser.py', 128),
    ('ebarat_bool -> zojmoratab OR_KW', 'ebarat_bool', 2, 'p_ebarart_bool', 'parser.py', 129),
    ('ebarat_bool -> zojmoratab AND_THEN_KW', 'ebarat_bool', 2, 'p_ebarart_bool', 'parser.py', 130),
    ('ebarat_bool -> zojmoratab OR_NOT_KW', 'ebarat_bool', 2, 'p_ebarart_bool', 'parser.py', 131),
    ('ebarat_bool -> zojmoratab LT', 'ebarat_bool', 2, 'p_ebarart_bool', 'parser.py', 132),
    ('ebarat_bool -> zojmoratab LE', 'ebarat_bool', 2, 'p_ebarart_bool', 'parser.py', 133),
    ('ebarat_bool -> zojmoratab G', 'ebarat_bool', 2, 'p_ebarart_bool', 'parser.py', 134),
    ('ebarat_bool -> zojmoratab GE', 'ebarat_bool', 2, 'p_ebarart_bool', 'parser.py', 135),
    ('ebarat_bool -> zojmoratab EQ', 'ebarat_bool', 2, 'p_ebarart_bool', 'parser.py', 136),
    ('ebarat_bool -> zojmoratab NEQ', 'ebarat_bool', 2, 'p_ebarart_bool', 'parser.py', 137),
    ('ebarat_bool -> ebarat NOT_KW', 'ebarat_bool', 2, 'p_ebarart_bool', 'parser.py', 138),
    ('ebarat_riazi -> zojmoratab PLUS', 'ebarat_riazi', 2, 'p_ebarat_riazi', 'parser.py', 141),
    ('ebarat_riazi -> zojmoratab MINUS', 'ebarat_riazi', 2, 'p_ebarat_riazi', 'parser.py', 142),
    ('ebarat_riazi -> zojmoratab MUL', 'ebarat_riazi', 2, 'p_ebarat_riazi', 'parser.py', 143),
    ('ebarat_riazi -> zojmoratab DIV', 'ebarat_riazi', 2, 'p_ebarat_riazi', 'parser.py', 144),
    ('ebarat_riazi -> zojmoratab MOD', 'ebarat_riazi', 2, 'p_ebarat_riazi', 'parser.py', 145),
    ('ebarat_riazi -> MINUS ebarat', 'ebarat_riazi', 2, 'p_ebarat_riazi', 'parser.py', 146),
    ('zojmoratab -> OPENING_PARENTHESES ebarat COMMA ebarat COSING_PARENTHESES', 'zojmoratab', 5, 'p_zojmoratab',
     'parser.py', 149),
]
